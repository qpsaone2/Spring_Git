<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp2.BasicDataSource">
		<property name="url" value="jdbc:oracle:thin:@localhost" />
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="username" value="human" />
		<property name="password" value="1234" />
	</bean>
	
	<!-- 	1. BasicDataSource를 이용하여 커넥션 풀 설정 -->
<!-- 		DriverManagerDataSource는 커넥션 풀을 지원 안함 -->
<!-- 		개발시에는 DriverManagerDataSource를 사용해서 개발하고..개발이 끝나고 -->
<!-- 		운영환경에서는 커넥션풀을 지원하는 클래스로 대체 -->
<!-- 	 <bean  id="dataSource"  class="org.apache.tomcat.dbcp.dbcp2.BasicDataSource"> -->
<!-- 	 	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> -->
<!-- 	 	<property name="url" value="jdbc:oracle:thin:@localhost" /> -->
<!-- 	 	<property name="username" value="human"/> -->
<!-- 	 	<property name="password" value="1234" /> -->
<!-- 	 	<property name="maxIdle" value="5"/> -->
<!-- 	 	<property name="minIdle" value="2"/> -->
<!-- 	 	<property name="maxTotal" value="30"/> -->
<!-- 	 	<property name="initialSize" value="10"/> -->
<!-- 	 	<property name="maxWaitMillis" value="-1"/> -->
<!-- 	 </bean> -->
	 
	 <!-- 	2.JNDI를 이용하여 context.xml에 등록해둔 Resource를 불러서 사용 -->
<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!--  		<property name="jndiName" value="java:/comp/env/cloud"/>  -->
 				
<!--  		resourceRef를 true로 설정하면 java:/comp/env/를 안붙여도 디폴트로 인식함  -->
<!-- 		<property name="jndiName" value="cloud"/> -->
<!-- 		<property name="resourceRef" value="true"/> -->
<!-- 	</bean>	 -->

<!-- 	3. JEE 이용해서 커넥션 풀 설정 -->
<!-- 	<jee:jndi-lookup id="dataSource" jndi-name="cloud" resource-ref="true"/> -->

	<bean id="transactionManager" 
	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> 
	 </bean>
		
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" 
 		p:dataSource-ref="dataSource" p:configLocation="classpath:/mybatisConfig/mybatisConfig.xml"
 		p:mapperLocations="classpath:/com/cloud/mapper/**/*.xml"/>	 	
	 
<!--  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
<!--  	<property name="dataSource" ref="dataSource"/>   -->
<!-- 	<property name="configLocation" value="classpath:/mybatisConfig/mybatisConfig.xml"/> -->
<!-- 	<property name="mapperLocations" value="classpath:/com/ict/human/mapper/**/*.xml"></property> -->
<!--  </bean> -->
	
	
	<bean id ="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">		
<!-- 	 	<constructor-arg> -->
<!-- 	 		<ref bean="sqlSessionFactory"/> -->
<!-- 	 	</constructor-arg>		 -->
			<constructor-arg ref="sqlSessionFactory"/>
	 </bean>
	 
	 <bean id="saveDir" class="java.lang.String">
		 <constructor-arg value="d:/upload/" />
	 </bean>
	 
	 <mybatis-spring:scan base-package="com.cloud.bbs.dao1"/>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
		
</beans>
